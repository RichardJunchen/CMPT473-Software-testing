import os
import filecmp

input_file = "TestData/TestFiles/"
actual_output_file = "TestOutput/Files/"
expect_output_file = "TestData/ExpectedOutput/"
actual_message = "TestOutput/Messages/"
expect_message = "TestData/ExpectedMessages/"
input_template = "json2csv -i "
file_flag = False
msg_flag = False
msg_file_count = 1

def inputArg(test_file):
    argument = input_template + input_file + test_file
    return argument

  
def outputArg(result):
    argument = "-o " + actual_output_file + result
    return argument
  
  
def inputFileName(test_file_name):
    input_path = input_file + test_file_name
    return input_path
  
  
def constructCommand(test_file, result, test_number):
    input_cmd = inputArg(test_file)
    output_cmd = outputArg(result)
    command = input_cmd + " " + output_cmd
    additonal_cmd = ""

    if test_number == 1:
        additonal_cmd = ""
    elif test_number == 2:
        additonal_cmd = ' -Q "*" -q "@" -e "$" -d "&" '
    elif test_number == 3:
        additonal_cmd = ' -q "@" -d "&"'
    elif test_number == 4:
        additonal_cmd = ' -Q "*" -e "$"'
    elif test_number == 5:
        additonal_cmd = ' -q "@" -e "$"'
    elif test_number == 6:
        additonal_cmd = ' -Q "*" -d "&"'
    elif test_number == 7:
        additonal_cmd = ' -q "@" -d "&"'
    elif test_number == 8:
        additonal_cmd = ' -q "@" -e "$"'

    command += additonal_cmd
    return command
    
    
def compareFileContent(test_File, output, expect_output, expect_msg_file):
    global file_flag
    global msg_file_count
    actual_result_file = actual_output_file + output
    expect_result_file = expect_output_file + expect_output
    result = filecmp.cmp(actual_result_file, expect_result_file)
    output_msg_path = actual_message + "outputMsg" + str(msg_file_count) + ".txt"
    with open(output_msg_path, 'w+') as file:
        if result == True:
          print("Actual and expected output matched.")
          file.write("Correct result of comparison, test passed.")
          file_flag = True
        else:
          print("Actual and expected output NOT matched.")
          file.write("Incorrect result of comparison, test failed.")
          file_flag = False
    file.close()
    msg_file_count += 1
    compareMessages(output_msg_path, expect_msg_file)
    

def compareMessages(actual_msg_file, expect_msg_file):
  global msg_flag
  expect_msg_file = expect_message + expect_msg_file
  result_msg = filecmp.cmp(actual_msg_file, expect_msg_file)
  if result_msg == True:
     print("Actual and expected message matched.\n")
     msg_flag = True
  else:
     print("Actual and expected message NOT matched.\n")
     msg_flag = False

  
def runCommand(input_file, output_file, expect_output, expect_msg_file, test_number):
    global file_flag
    global msg_flag
    if test_number == 1:
      print("========== TEST1: empty file, no backslash, no empty row, no quotes, not use command -Q, -q, -e, -d ==========\n")
    elif test_number == 2:
      print("========== TEST2: non-empty file, has backslash, empty row and quotes, use command -Q, -q, -e, -d ==========\n")
    elif test_number == 3:
      print("========== TEST3: non-empty file, no backslash, no empty row, has quotes, use command -q, -d, not use command -Q, -e,  ==========\n")
    elif test_number == 4:
      print("========== TEST4: non-empty file, no backslash, has empty row, no quotes, use command -Q, -e, not use command -q -d ==========\n")
    elif test_number == 5:
      print("========== TEST5: non-empty file, has backslash, no empty row, no quotes, use command -q, -e, not use command -Q, -d ==========\n")
    elif test_number == 6:
      print("========== TEST6: non-empty file, has backslash, no empty row, has quotes, use use command -Q, -d, not use -q, -e ==========\n")
    elif test_number == 7:
      print("========== TEST7: non-empty file, no backslash, has empty row, no quotes, use use command -q, -d, not use -Q, -e ==========\n")
    elif test_number == 8:
      print("========== TEST8: non-empty file, has backslash, no empty row, has quotes, use use command -q, -e, not use -Q, -d ==========\n")
    

    command = constructCommand(input_file, output_file, test_number)
    os.system(command)
    compareFileContent(input_file, output_file, expect_output, expect_msg_file)
    if (file_flag == True and msg_flag == True):
        print("Test" + str(test_number) + " PASSED!")
    else:
        print("Test" + str(test_number) + " FAILED!")


def runTestCases():
    print("\n....................... Running script to check EIGHT test cases generated by ACTS .......................\n")
    runCommand("test1.json","output_file1.csv","expectOutput1.csv","expectMsg1.txt", 1)
    runCommand("test2.json","output_file2.csv","expectOutput2.csv","expectMsg2.txt", 2)
    runCommand("test3.json","output_file3.csv","expectOutput3.csv","expectMsg3.txt", 3)
    runCommand("test4.json","output_file4.csv","expectOutput4.csv","expectMsg4.txt", 4)
    runCommand("test5.json","output_file5.csv","expectOutput5.csv","expectMsg5.txt", 5)
    runCommand("test6.json","output_file6.csv","expectOutput6.csv","expectMsg6.txt", 6)
    runCommand("test7.json","output_file7.csv","expectOutput7.csv","expectMsg7.txt", 7)
    runCommand("test8.json","output_file8.csv","expectOutput8.csv","expectMsg8.txt", 8)

if __name__ == "__main__":
    runTestCases()